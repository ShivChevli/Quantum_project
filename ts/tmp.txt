export class MobileMenu {
    domNode: HTMLDivElement;
    button: SVGSVGElement;
    menu: HTMLElement;
    menuitems: HTMLElement[];
    popups: HTMLElement[];
    menuitemGroups: any;
    menuOrientation: any;
    isPopup: any;
    isPopout: any;
    openPopups: boolean;
    firstChars: any;
    firstMenuitem: any;
    lastMenuitem: any;

    constructor(element: HTMLDivElement) {
        this.domNode = element;
        this.button = element.querySelector("svg");
        this.menu = element.querySelector("nav");
        var linkURL, linkTitle;

        this.menuitems = [];
        this.popups = [];
        this.menuitemGroups = {};
        this.menuOrientation = {};
        this.isPopup = {};
        this.isPopout = {};
        this.openPopups = false;

        this.firstChars = {}; // see Menubar init method
        this.firstMenuitem = {}; // see Menubar init method
        this.lastMenuitem = {}; // see Menubar init method

        this.initMenu(domNode, 0);

        this.domNode.addEventListener("focusin", this.onMenubarFocusin.bind(this));
        this.domNode.addEventListener("focusout", this.onMenubarFocusout.bind(this));

        window.addEventListener(
            "pointerdown",
            this.onBackgroundPointerdown.bind(this),
            true
        );

        let tmp = element.querySelector("[role=menuitem]") as HTMLElement;
        tmp.tabIndex = 0;

        // Initial content for page
        // if (location.href.split("#").length > 1) {
        // linkURL = location.href;
        // linkTitle = getLinkNameFromURL(location.href);
        // } else {
        // linkURL = location.href + "#home";
        // linkTitle = "Home";
        // }

    }

    getParentMenuitem(menuitem) {
        var node = menuitem.parentNode;
        if (node) {
            node = node.parentNode;
            if (node) {
                node = node.previousElementSibling;
                if (node) {
                    if (node.getAttribute("role") === "menuitem") {
                        return node;
                    }
                }
            }
        }
        return false;
    }

    getMenuitems(domNode, depth) {
        var nodes = [];

        var initMenu = this.initMenu.bind(this);
        var popups = this.popups;

        function findMenuitems(node) {
            var role, flag;

            while (node) {
                flag = true;
                role = node.getAttribute("role");

                if (role) {
                    role = role.trim().toLowerCase();
                }

                switch (role) {
                    case "menu":
                        node.tabIndex = -1;
                        initMenu(node, depth + 1);
                        flag = false;
                        break;

                    case "menuitem":
                        if (node.getAttribute("aria-haspopup") === "true") {
                            popups.push(node);
                        }
                        nodes.push(node);
                        break;

                    default:
                        break;
                }

                if (
                    flag &&
                    node.firstElementChild &&
                    node.firstElementChild.tagName !== "svg"
                ) {
                    findMenuitems(node.firstElementChild);
                }
                node = node.nextElementSibling;
            }
        }
        findMenuitems(domNode.firstElementChild);
        return nodes;
    }

    initMenu(menu, depth) {
        var menuitems, menuitem, role;

        var menuId = this.getMenuId(menu);

        menuitems = this.getMenuitems(menu, depth);
        this.menuOrientation[menuId] = this.getMenuOrientation(menu);

        this.isPopup[menuId] = menu.getAttribute("role") === "menu" && depth === 1;
        this.isPopout[menuId] = menu.getAttribute("role") === "menu" && depth > 1;

        this.menuitemGroups[menuId] = [];
        this.firstChars[menuId] = [];
        this.firstMenuitem[menuId] = null;
        this.lastMenuitem[menuId] = null;

        for (var i = 0; i < menuitems.length; i++) {
            menuitem = menuitems[i];
            role = menuitem.getAttribute("role");

            if (role.indexOf("menuitem") < 0) {
                continue;
            }

            menuitem.tabIndex = -1;
            this.menuitems.push(menuitem);
            this.menuitemGroups[menuId].push(menuitem);
            this.firstChars[menuId].push(
                menuitem.textContent.trim().toLowerCase()[0]
            );

            menuitem.addEventListener("keydown", this.onKeydown.bind(this));
            menuitem.addEventListener("click", this.onMenuitemClick.bind(this), {
                capture: true,
            });

            menuitem.addEventListener(
                "pointerover",
                this.onMenuitemPointerover.bind(this)
            );

            if (!this.firstMenuitem[menuId]) {
                if (this.hasPopup(menuitem)) {
                    menuitem.tabIndex = 0;
                }
                this.firstMenuitem[menuId] = menuitem;
            }
            this.lastMenuitem[menuId] = menuitem;
        }
    }

    
  getMenuId(node) {
    var id = null;
    var role = node.getAttribute("role");

    while (node && role !== "menu" && role !== "menubar") {
      node = node.parentNode;
      if (node) {
        role = node.getAttribute("role");
      }
    }

    if (node) {
      id = role + "-" + this.getIdFromAriaLabel(node);
    }

    return id;
    }
    
    
  getIdFromAriaLabel(node) {
    var id = node.getAttribute("aria-label");
    if (id) {
      id = id.trim().toLowerCase().replace(" ", "-").replace("/", "-");
    }
    return id;
  }

    openMenue() {
        this.button.setAttribute("aria-expanded", "true");
        this.menu.classList.add("show");
    }
}